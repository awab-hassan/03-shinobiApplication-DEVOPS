---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: shinobi-config-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany  # Use appropriate access mode (ReadWriteOnce, ReadOnlyMany, ReadWriteMany)
  persistentVolumeReclaimPolicy: Retain  # Use Retain, Recycle, or Delete as needed
  storageClassName: manual  # Use the appropriate StorageClass
  nfs:
    path: /mnt/nfs_mount
    server: #IP
    readOnly: false
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: shinobi-mysql-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany  # Use appropriate access mode (ReadWriteOnce, ReadOnlyMany, ReadWriteMany)
  persistentVolumeReclaimPolicy: Retain  # Use Retain, Recycle, or Delete as needed
  storageClassName: manual  # Use the appropriate StorageClass
  nfs:
    path: /mnt/nfs_mount
    server: #IP
    readOnly: false
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: shinobi-streams-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany  # Use appropriate access mode (ReadWriteOnce, ReadOnlyMany, ReadWriteMany)
  persistentVolumeReclaimPolicy: Retain  # Use Retain, Recycle, or Delete as needed
  storageClassName: manual  # Use the appropriate StorageClass
  nfs:
    path: /mnt/nfs_mount
    server: #IP
    readOnly: false
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: shinobi-config-pvc
spec:
  accessModes:
    - ReadWriteMany  # Use the appropriate access mode
  storageClassName: manual  # Use the appropriate StorageClass
  resources:
    requests:
      storage: 1Gi  # Adjust the storage capacity to match the PV
  volumeName: shinobi-config-pv
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: shinobi-mysql-pvc
spec:
  accessModes:
    - ReadWriteMany  # Use the appropriate access mode (ReadWriteOnce, ReadOnlyMany, ReadWriteMany)
  storageClassName: manual  # Use the appropriate StorageClass
  resources:
    requests:
      storage: 1Gi  # Request the amount of storage you need
  volumeName: shinobi-mysql-pv
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: shinobi-streams-pvc
spec:
  accessModes:
    - ReadWriteMany  # Use the appropriate access mode
  storageClassName: manual  # Use the appropriate StorageClass
  resources:
    requests:
      storage: 1Gi  # Adjust the storage capacity to match the PV
  volumeName: shinobi-streams-pv
---
apiVersion: v1
kind: Secret
metadata:
  name: shinobi-secret
type: Opaque
data:
  ADMIN_USER: #BASE_64_ENCODED             #YOU CAN REFRENCE THEM AS WELL.
  ADMIN_PASSWORD: #BASE_64_ENCODED     
  MYSQL_ROOT_PASSWORD: #BASE_64_ENCODED
  MYSQL_USER: #BASE_64_ENCODED             #YOU CAN REFRENCE THEM AS WELL.
  MYSQL_PASSWORD: #BASE_64_ENCODED
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:latest
          env:
            - name: MYSQL_ONETIME_PASSWORD
              value: "true"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: MYSQL_ROOT_PASSWORD
                  name: shinobi-secret
            - name: MYSQL_DATABASE
              value: newdatabase
            - name: MYSQL_USER
              value: newuser
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: MYSQL_PASSWORD
                  name: shinobi-secret
          volumeMounts:
            - name: mysql-data
              mountPath: /var/mysql
      volumes:
        - name: mysql-data
          persistentVolumeClaim:
            claimName: shinobi-mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shinobi-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: shinobi
  template:
    metadata:
      labels:
        app: shinobi
    spec:
      containers:
        - name: shinobi
          image: registry.gitlab.com/shinobi-systems/shinobi:dev
          ports:
            - containerPort: 8080
          env:
            - name: MYSQL_HOST
              value: "mysql-service"
            - name: MYSQL_DATABASE
              value: newdatabase
            - name: MYSQL_USER
              value: newuser
            - name: ADMIN_USER
              value: "admin"
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: MYSQL_PASSWORD
                  name: shinobi-secret
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: ADMIN_PASSWORD
                  name: shinobi-secret
            - name: utcOffset
              value: "${utcOffset}"
          volumeMounts:
           - name: localtime
             mountPath: /etc/localtime
             readOnly: true
           - name: config-volume
             mountPath: /config
           - name: streams-volume
             mountPath: /dev/shm/streamss
      volumes:
        - name: localtime
          hostPath:
            path: /etc/localtime
        - name: config-volume
          persistentVolumeClaim:
            claimName: shinobi-config-pvc
        - name: streams-volume
          persistentVolumeClaim:
            claimName: shinobi-streams-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: shinobi-service
spec:
  selector:
    app: shinobi
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: NodePort
